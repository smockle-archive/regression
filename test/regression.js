const math = require("mathjs");
const test = require("tape");
const inspect = require("util").inspect;
const Matrix = require("@smockle/matrix");
const Regression = require("../lib/regression");

test("Regression", function(t) {
  t.plan(20);

  // VBR Return (Return-RF)
  const RAR = [
    -3.299606018,
    5.660926073,
    1.300771693,
    -1.297986198,
    1.370615722,
    -1.507395904,
    -0.946105019,
    -4.841277527,
    -3.586533681,
    6.628808772,
    1.316931792,
    -4.898786803
  ];

  // Market (MKT-RF)
  const MKT = [
    -3.11,
    6.13,
    -1.12,
    0.59,
    1.36,
    -1.53,
    1.54,
    -6.04,
    -3.07,
    7.75,
    0.56,
    -2.17
  ];

  // Size
  const SMB = [
    -0.62,
    0.47,
    3.14,
    -3.03,
    0.95,
    2.84,
    -4.17,
    0.43,
    -2.71,
    -1.86,
    3.55,
    -2.99
  ];

  // Value
  const HML = [
    -3.06,
    -2.16,
    -0.73,
    2.13,
    -1.9,
    -1.04,
    -4.49,
    2.88,
    0.73,
    -0.32,
    -1.23,
    -2.07
  ];

  // Momentum
  const UMD = [
    3.76,
    -2.88,
    3.02,
    -7.41,
    5.92,
    3.05,
    10.24,
    -2.16,
    5.26,
    -3.92,
    2.43,
    3.38
  ];

  const r = Regression([MKT, SMB, HML, UMD], RAR);
  t.equal(r.n, 12, "n observations");
  t.equal(r.p, 4, "p factor terms");
  t.deepEqual(
    r.X,
    Matrix([
      [1, -3.11, -0.62, -3.06, 3.76],
      [1, 6.13, 0.47, -2.16, -2.88],
      [1, -1.12, 3.14, -0.73, 3.02],
      [1, 0.59, -3.03, 2.13, -7.41],
      [1, 1.36, 0.95, -1.9, 5.92],
      [1, -1.53, 2.84, -1.04, 3.05],
      [1, 1.54, -4.17, -4.49, 10.24],
      [1, -6.04, 0.43, 2.88, -2.16],
      [1, -3.07, -2.71, 0.73, 5.26],
      [1, 7.75, -1.86, -0.32, -3.92],
      [1, 0.56, 3.55, -1.23, 2.43],
      [1, -2.17, -2.99, -2.07, 3.38]
    ]),
    "X matrix"
  );
  t.deepEqual(
    r.Y,
    Matrix([
      [-3.299606018],
      [5.660926073],
      [1.300771693],
      [-1.297986198],
      [1.370615722],
      [-1.507395904],
      [-0.946105019],
      [-4.841277527],
      [-3.586533681],
      [6.628808772],
      [1.316931792],
      [-4.898786803]
    ]),
    "Y matrix"
  );

  t.deepEqual(
    r.B,
    Matrix([
      [-0.11570512587416651],
      [0.9965414089434049],
      [0.46406431951315674],
      [0.29410972011067305],
      [0.0758741075412841]
    ]),
    "β coefficients factor terms"
  );
  t.deepEqual(
    r.fitted,
    [
      [-4.117357884969744],
      [5.3574095159621375],
      [0.23977016847441873],
      [-0.8696340157676041],
      [1.5708185422604861],
      [-0.3969288950543946],
      [-1.0597813505453595],
      [-5.25211965687211],
      [-3.818903655863128],
      [6.352789547145502],
      [1.912405522995039],
      [-4.018104935765246]
    ],
    "fitted Y values"
  );
  t.equal(r.mean, -0.3416364248333333, "mean Y value");

  t.deepEqual(
    r.residuals,
    [
      [0.8177518669697439],
      [0.3035165570378622],
      [1.0610015245255813],
      [-0.4283521822323959],
      [-0.2002028202604862],
      [-1.1104670089456055],
      [0.1136763315453595],
      [0.4108421298721101],
      [0.23236997486312783],
      [0.27601922485449837],
      [-0.5954737309950389],
      [-0.8806818672347543]
    ],
    "residual Y values"
  );
  t.equal(r.SST, 155.93033742014742, "SST total sum of squares");
  t.equal(r.SSE, 151.14498353223317, "SSE explained sum of squares");
  t.equal(r.SSR, 4.785353887914211, "SSR residual sum of squares");
  t.equal(
    math.format(r.SST, { notation: "fixed", precision: 8 }),
    math.format(r.SSE + r.SSR, { notation: "fixed", precision: 8 }),
    "SST = SSE + SSR"
  );
  t.equal(r.Rsquared, 0.969310950216055, "R² coefficient of determination");
  t.equal(r.Rsquaredadj, 0.9578025565470756, "adjusted R²");
  t.equal(r.stderr, 0.8268143588422642, "standard error of regression");

  t.equal(r.MSE, 0.6917625234077234, "MSE mean standard error");
  t.deepEqual(
    r.VAR,
    Matrix([
      [
        0.07196948249766646,
        0.0025212277747416315,
        0.0025208085553061446,
        0.015445877772156624,
        0.00047794386911134755
      ],
      [
        0.0025212277747416315,
        0.008540646610658573,
        0.0005674745970637586,
        0.01395071899820061,
        0.005872357927868933
      ],
      [
        0.002520808555306144,
        0.0005674745970637586,
        0.009048264369132409,
        -0.00017904322635722093,
        0.00016540723502594728
      ],
      [
        0.015445877772156624,
        0.01395071899820061,
        -0.00017904322635722077,
        0.04885262790234827,
        0.016993607738073208
      ],
      [
        0.00047794386911134755,
        0.0058723579278689335,
        0.00016540723502594734,
        0.01699360773807321,
        0.008750503967407862
      ]
    ])
  );
  t.deepEqual(
    r.STDERR,
    [
      0.26827128526487226,
      0.09241561886747593,
      0.09512236524147415,
      0.22102630590576378,
      0.09354412844966734
    ],
    "standard error matrix (diagonal of variance)"
  );
  t.deepEqual(
    r.TSTAT,
    [
      -0.4312989582911469,
      10.783257431543538,
      4.878603663135374,
      1.3306548236664144,
      0.8111049704430051
    ],
    "test statistic (significance)"
  );

  // Regression#inspect
  t.equal(
    inspect(r),
    "R²: 96.93%\nAdj R²: 95.78%\nStd Err: 0.83\n\ny: -0.12 (t-stat -0.43)\nx1: 1.00 (t-stat 10.78)\nx2: 0.46 (t-stat 4.88)\nx3: 0.29 (t-stat 1.33)\nx4: 0.08 (t-stat 0.81)",
    "inspect regression"
  );
});
